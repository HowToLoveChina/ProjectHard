#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>

/*
  alps s6 翻译机的BOOTIMG中的rootfs展开与打包 
  mtkclient rl apls-s6   读取所有的内容
  abootimg -x  apls-s6/BOOTIMG.bin  展开启动映象
  dd if=initrd.img of=initrd.gz bs=512 skip=1    跳过前面的文件头
  gunzip initrd.gz     删除了initr.gz 生成未压缩
  cpio -divm < initrd   展开
  修改default.prop 
       ro.debugable=1
       ro.adb.secure=0
       persist.servie.adb.enable=1
       persist.sys.usb.confg=mtp,adb 
  以上为修改项，保持打开adb 
  find .| cpio -o -H newc | gzip > ../new_initrd.gz    #打包成gz
  mkrootfs   new_initrd.gz   #本程序生成new_initrd.img 
  abootimg -u BOOTIMG.bin  -r new_initrd.img     #修改原始文件
  mtk  w BOOTIMG  BOOTIMG.bin    #刷回

PRELOADER:           Offset 0x0000000000000000, Length 0x0000000000c00000, Flags 0x000000ff, UUID b'', Type 1
MBR:                 Offset 0x0000000000c00000, Length 0x0000000000080000, Flags 0x000000ff, UUID b'', Type 1
EBR1:                Offset 0x0000000000c80000, Length 0x0000000000080000, Flags 0x000000ff, UUID b'', Type 1
PRO_INFO:            Offset 0x0000000000d00000, Length 0x0000000000300000, Flags 0x000000ff, UUID b'', Type 1
NVRAM:               Offset 0x0000000001000000, Length 0x0000000000500000, Flags 0x000000ff, UUID b'', Type 1
PROTECT_F:           Offset 0x0000000001500000, Length 0x0000000000a00000, Flags 0x000000ff, UUID b'', Type 1
PROTECT_S:           Offset 0x0000000001f00000, Length 0x0000000000a00000, Flags 0x000000ff, UUID b'', Type 1
SECCFG:              Offset 0x0000000002900000, Length 0x0000000000020000, Flags 0x000000ff, UUID b'', Type 1
UBOOT:               Offset 0x0000000002920000, Length 0x0000000000060000, Flags 0x000000ff, UUID b'', Type 1
BOOTIMG:             Offset 0x0000000002980000, Length 0x0000000000600000, Flags 0x000000ff, UUID b'', Type 1
RECOVERY:            Offset 0x0000000002f80000, Length 0x0000000000600000, Flags 0x000000ff, UUID b'', Type 1
SEC_RO:              Offset 0x0000000003580000, Length 0x0000000000040000, Flags 0x000000ff, UUID b'', Type 1
MISC:                Offset 0x00000000035c0000, Length 0x0000000000080000, Flags 0x000000ff, UUID b'', Type 1
LOGO:                Offset 0x0000000003640000, Length 0x0000000000300000, Flags 0x000000ff, UUID b'', Type 1
EXPDB:               Offset 0x0000000003940000, Length 0x0000000000a00000, Flags 0x000000ff, UUID b'', Type 1
ANDROID:             Offset 0x0000000004340000, Length 0x0000000032000000, Flags 0x000000ff, UUID b'', Type 1
CACHE:               Offset 0x0000000036340000, Length 0x000000000e200000, Flags 0x000000ff, UUID b'', Type 1
USRDATA:             Offset 0x0000000044540000, Length 0x00000000a1bc0000, Flags 0x000000ff, UUID b'', Type 1
BMTPOOL:             Offset 0x00000000ffff0000, Length 0x0000000001500000, Flags 0x000000ff, UUID b'', Type 1

*/

int main( int argc,char ** argv){
        FILE *fp = fopen(argv[1],"rb");
        fseek(fp,0,SEEK_END);
        uint32_t sz = (uint32_t)ftell(fp);
        printf("size=%u\n",sz);
        fseek(fp,0,SEEK_SET);
        uint32_t header[512/4];
        memset(header,0xff,sizeof(header));
        memset(header,0x00,40);
        header[0]=0x58881688;
        header[1]=(uint32_t)sz;
        strcpy((char*)&header[2],"ROOTFS");
        FILE *fo=fopen("new_initrd.img","wb");
        fwrite(header,1,512,fo);
        while(sz>0){
           uint32_t n =  (sz>512)?512:sz;
           fread(header,1,n,fp);
           fwrite(header,1,n,fo);
           sz -=n;
        }
        fclose(fp);
        fclose(fo);
        return 0;
}
